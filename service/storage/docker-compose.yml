networks:
  net:
    name: dev
    external: true

services:
  redis:
    image: ${REDIS_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-redis
    profiles: [ all, redis ]
    restart: ${COMPOSE_RESTART_POLICY}
    volumes:
      - ./vol/redis:/data
    networks:
      - net
    ports:
      - 6379:6379

  redis-commander:
    image: ${REDIS_COMMANDER_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-redis-commander
    profiles: [ all, redis ]
    restart: ${COMPOSE_RESTART_POLICY}
    networks:
      - net
    environment:
    - REDIS_HOSTS=local-db-0:redis:6379:0
    ports:
    - ${REDIS_COMMANDER_PORT}:8081

  mysql:
    image: ${MYSQL_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-mysql
    profiles: [ all, mysql ]
    restart: ${COMPOSE_RESTART_POLICY}
    volumes:
      # - ./vol/mysql:/var/lib/mysql
      # - ./setup/mysql.sql:/docker-entrypoint-initdb.d/1.sql
      - mysql:/var/lib/mysql
    networks:
      - net
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    # gives executable permission to run the init script
    # command: bash -c "chmod +x /docker-entrypoint-initdb.d/1.sql && docker-entrypoint.sh mysqld"

  phpmyadmin:
    image: ${PHP_MY_ADMIN_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-phpmyadmin
    profiles: [ all, pma, mysql ]
    restart: ${COMPOSE_RESTART_POLICY}
    networks:
      - net
    ports:
      - ${PHP_MY_ADMIN_PORT}:80
    environment:
      - PMA_ARBITRARY=1
      - UPLOAD_LIMIT=1G
      - PMA_HOSTS=mysql
    depends_on:
      - mysql

  mongo:
    image: ${MONGO_DB_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-mongo
    profiles: [ all, mongo ]
    restart: ${COMPOSE_RESTART_POLICY}
    volumes:
      - ./vol/mongo:/data/db
    networks:
      - net
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}

  mongo-express:
    image: ${MONGO_EXPRESS_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-mongo_express
    profiles: [ all, mongo ]
    restart: ${COMPOSE_RESTART_POLICY}
    networks:
      - net
    ports:
      - ${MONGO_EXPRESS_PORT}:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/
    depends_on:
      - mongo

  psql:
    image: ${POSTGRES_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-psql
    profiles: [ all, psql ]
    restart: ${COMPOSE_RESTART_POLICY}
    volumes:
      - ./vol/psql:/var/lib/postgresql/data
    networks:
      - net
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

  adminer:
    image: ${ADMINER_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-adminer
    profiles: [ all, adminer ]
    restart: ${COMPOSE_RESTART_POLICY}
    networks:
      - net
    ports:
      - ${ADMINER_PORT}:8080
    environment:
      - ADMINER_UPLOAD_LIMIT=1G
    labels:
      - com.centurylinklabs.watchtower.enable=true

  pgadmin:
    image: ${PGADMIN_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-pgadmin
    profiles: [ all, pgadmin ]
    restart: ${COMPOSE_RESTART_POLICY}
    networks:
      - net
    ports:
      - ${PGADMIN_PORT}:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}  # replace with your admin email
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD} # replace with your admin password
    volumes:
      - pgadmin:/var/lib/pgadmin

  couchdb:
    image: ${COUCH_DB_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-couchdb
    profiles: [ all, couchdb ]
    restart: ${COMPOSE_RESTART_POLICY}
    volumes:
      - ./vol/couchdb:/opt/couchdb/data
    networks:
      - net
    ports:
      - 5984:5984
    environment:
      COUCHDB_USER: ${COUCH_DB_USER}
      COUCHDB_PASSWORD: ${COUCH_DB_PASSWORD}

  clickhouse:
    image: ${CLICKHOUSE_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-clickhouse
    profiles: [ all, clickhouse ]
    restart: ${COMPOSE_RESTART_POLICY}
    volumes:
      - ./vol/clickhouse:/var/lib/clickhouse
    networks:
      - net
    ports:
      - 8123:8123
      - 9000:9000
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
    # deploy:
    #   resources:
    #     limits:
    #       memory: 4G
    #       cpus: 2

  clickhouse-client:
    image: ghcr.io/caioricciuti/ch-ui:latest  # Using the ClickHouse UI client image here
    container_name: ${COMPOSE_PROJECT_PREFIX}-clickhouse-client
    profiles: [ all, clickhouse ]
    networks:
      - net
    ports:
      - 5521:5521
    # environment:
      # VITE_CLICKHOUSE_URL: http://dev-clickhose:8123  # Adjust based on network if needed
      # VITE_CLICKHOUSE_URL: http://dev-clickhose:9000  # Adjust based on network if needed
      # VITE_CLICKHOUSE_USER: root
      # VITE_CLICKHOUSE_PASS: pass123

  hasura:
    image: ${HASURA_IMAGE}
    container_name: ${COMPOSE_PROJECT_PREFIX}-hasura
    profiles: [ all, hasura ]
    restart: ${COMPOSE_RESTART_POLICY}
    networks:
      - net
    ports:
      - ${HASURA_PORT}:8080
    environment:
      HASURA_GRAPHQL_DATABASE_URL: ${HASURA_GRAPHQL_DATABASE_URL}
      HASURA_GRAPHQL_ENABLE_CONSOLE: ${HASURA_GRAPHQL_ENABLE_CONSOLE}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}

volumes:
  mysql:
    name: dev-mysql
  pgadmin:
    name: dev-pgadmin
